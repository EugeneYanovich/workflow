import org.testng.Assert;
import org.testng.annotations.*;
import pen.Pen;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Paths;


public class PenTest {

    @BeforeMethod
    public void before(){
        System.out.println("Test started");
    }
    @AfterMethod
    public void after(){
        System.out.println("Test finished");
        System.out.println();
    }

    @Test(enabled = false)
    public void testPenWrite_Ignore() {
        System.out.println("All is fine");

    }


    @Test
    public void testPenWrite_MaxIntCapacity() {
        Pen pen = new Pen(2147483647+1, 1);
        Boolean bool = pen.isWork();
        Assert.assertTrue(bool, "Count of inkCountainerValue isn't positive");
    }

    @Test
    public void testPenWrite_inkContainerValueRound() {
        Pen pen = new Pen(3, 0.3);
        String word = pen.write("123456789");
        Boolean bool = pen.isWork();
        Assert.assertTrue(bool, "It should be possible to write one more character");
    }


    @Test
    public void testPenWrite_NegativeContainerValue() {
        Pen pen = new Pen(-5, 1.0);
        String word = pen.write("hello");
        Boolean bool = pen.isWork();
        Assert.assertFalse(bool);
    }

    @Test
    public void testPenWrite_NegativeSize() {
        Pen pen = new Pen(5, -1.0);
        String word = pen.write("Hello");
        Boolean bool = pen.isWork();
        Assert.assertFalse(bool, "It shouldn't be possible to enter a negative sizeLetter");
    }

    @Test
    public void testPenWrite_WordWithSpaces() {
        Pen pen = new Pen(10, 1.0);
        String word = pen.write("123 456789");
        Boolean bool = pen.isWork();
        Assert.assertTrue(bool, "Space symbol spends inkContainerValue");
    }

    @Test
    @Parameters({"param"})
    public void testPenWrite_CutWord(String param) {
        Pen pen = new Pen(5, 1.0);
        String word = pen.write(param);
        Assert.assertEquals(word, "Testi");
    }

    @Test
    public void testIsWork_NullInkConValue() {
        Pen pen = new Pen(7, 1.0);
        String word = pen.write("Testing");
        Boolean isWork = pen.isWork();
        Assert.assertFalse(isWork, "Testing");
    }

    @Test
    public void testPenWrite_Smoke() {
        Pen pen = new Pen(10, 1.0);
        String word = pen.write("Testing");
        Assert.assertEquals(word, "Testing");
    }

    @Test
    public void testPenWrite_SubstringSmoke() {
        Pen pen = new Pen(20, 2.0);
        String word = pen.write("Testing");
        Assert.assertEquals(word, "Testing", "error");
        word = pen.write("Testing");
        Assert.assertEquals(word, "Tes", "Substirng doesn't take account of sizeLetter");
    }

    @Test
    public void testPenWrite_IsEmpty() {
        Pen pen = new Pen(0);
        String string = pen.write("any");
        Assert.assertEquals(string, "");
    }

    @Test
    public void testPenGetColor() {
        Pen pen = new Pen(1, 1.0, "RED");
        Assert.assertEquals(pen.getColor(), "RED", "getColor returs not constructor's data");
    }

    @Test(groups ={"IsWorkTest"})
    public void testPenIsWork_false() {
        Pen pen = new Pen(0);
        Boolean isWork = pen.isWork();
        Assert.assertFalse(isWork);
    }

    @Test(groups ={"IsWorkTest"})
    public void testPenIsWork_true() {
        Pen pen = new Pen(1);
        Boolean isWork = pen.isWork();
        Assert.assertTrue(isWork);
    }

    @Test(timeOut = 1000)
    public void testDoSomethingElse_ColorPrint() throws IOException {
        Pen pen = new Pen(1, 1.0, "RED");
        File file = new File("d:\\temp.txt");
        PrintStream ps = new PrintStream(file);
        PrintStream standardOut = System.out;
        System.setOut(ps);
        pen.doSomethingElse();
        Assert.assertEquals(Files.readAllLines(Paths.get(file.toURI())).get(0), "RED");
        System.setOut(standardOut);
    }

}
